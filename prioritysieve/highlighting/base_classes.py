from __future__ import annotations

from abc import abstractmethod


class Range:
    def __init__(self, start: int, end: int):
        self.start = start
        self.end = end


class Injector:
    @abstractmethod
    def open(self) -> str:
        """
        Returns the opening tag or markup for a specific type of annotation.
        """

    @abstractmethod
    def close(self) -> str:
        """
        Returns the closing tag or markup for a specific type of annotation.
        """

    @abstractmethod
    def inject(self, target: str) -> str:
        """
        Injects the markup generated by open, close, and rt into a target string at the specified range.
        """

    def open_len(self) -> int:
        """
        Useful for setting string splice offsets.
        """
        return len(self.open())
